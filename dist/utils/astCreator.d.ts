import * as es from 'estree';
import { AllowedDeclarations, BlockExpression, FunctionDeclarationExpression } from '../types';
export declare const getVariableDecarationName: (decl: es.VariableDeclaration) => string;
export declare const locationDummyNode: (line: number, column: number) => es.Literal;
export declare const identifier: (name: string, loc?: es.SourceLocation | null) => es.Identifier;
export declare const literal: (value: string | number | boolean | null, loc?: es.SourceLocation | null) => es.Literal;
export declare const memberExpression: (object: es.Expression, property: string | number) => es.MemberExpression;
export declare const declaration: (name: string, kind: AllowedDeclarations, init: es.Expression, loc?: es.SourceLocation | null) => es.VariableDeclaration;
export declare const constantDeclaration: (name: string, init: es.Expression, loc?: es.SourceLocation | null) => es.VariableDeclaration;
export declare const callExpression: (callee: es.Expression, args: es.Expression[], loc?: es.SourceLocation | null) => es.CallExpression;
export declare const expressionStatement: (expression: es.Expression) => es.ExpressionStatement;
export declare const blockArrowFunction: (params: es.Identifier[], body: es.Statement[] | es.BlockStatement, loc?: es.SourceLocation | null) => es.ArrowFunctionExpression;
export declare const functionExpression: (params: es.Pattern[], body: es.Statement[] | es.BlockStatement, loc?: es.SourceLocation | null) => es.FunctionExpression;
export declare const blockStatement: (body: es.Statement[]) => es.BlockStatement;
export declare const program: (body: es.Statement[]) => es.Program;
export declare const returnStatement: (argument: es.Expression, loc?: es.SourceLocation | null) => es.ReturnStatement;
export declare const property: (key: string, value: es.Expression) => es.Property;
export declare const objectExpression: (properties: es.Property[]) => es.ObjectExpression;
export declare const mutateToCallExpression: (node: es.Node, callee: es.Expression, args: es.Expression[]) => void;
export declare const mutateToAssignmentExpression: (node: es.Node, left: es.Pattern, right: es.Expression) => void;
export declare const mutateToExpressionStatement: (node: es.Node, expr: es.Expression) => void;
export declare const mutateToReturnStatement: (node: es.Node, expr: es.Expression) => void;
export declare const mutateToMemberExpression: (node: es.Node, obj: es.Expression, prop: es.Expression) => void;
export declare const logicalExpression: (operator: es.LogicalOperator, left: es.Expression, right: es.Expression, loc?: es.SourceLocation | null) => es.LogicalExpression;
export declare const mutateToConditionalExpression: (node: es.Node, test: es.Expression, consequent: es.Expression, alternate: es.Expression) => void;
export declare const conditionalExpression: (test: es.Expression, consequent: es.Expression, alternate: es.Expression, loc?: es.SourceLocation | null) => es.ConditionalExpression;
export declare const arrayExpression: (elements: es.Expression[]) => es.ArrayExpression;
export declare const assignmentExpression: (left: es.Identifier | es.MemberExpression, right: es.Expression) => es.AssignmentExpression;
export declare const binaryExpression: (operator: es.BinaryOperator, left: es.Expression, right: es.Expression, loc?: es.SourceLocation | null) => es.BinaryExpression;
export declare const unaryExpression: (operator: es.UnaryOperator, argument: es.Expression, loc?: es.SourceLocation | null) => es.UnaryExpression;
export declare const primitive: (value: any) => es.Expression;
export declare const functionDeclarationExpression: (id: es.Identifier, params: es.Pattern[], body: es.BlockStatement, loc?: es.SourceLocation | null) => FunctionDeclarationExpression;
export declare const functionDeclaration: (id: es.Identifier | null, params: es.Pattern[], body: es.BlockStatement, loc?: es.SourceLocation | null) => es.FunctionDeclaration;
export declare const blockExpression: (body: es.Statement[], loc?: es.SourceLocation | null) => BlockExpression;
export declare const arrowFunctionExpression: (params: es.Pattern[], body: es.Expression | es.BlockStatement, loc?: es.SourceLocation | null) => es.ArrowFunctionExpression;
export declare const variableDeclaration: (declarations: es.VariableDeclarator[], loc?: es.SourceLocation | null) => es.VariableDeclaration;
export declare const variableDeclarator: (id: es.Pattern, init: es.Expression, loc?: es.SourceLocation | null) => es.VariableDeclarator;
export declare const ifStatement: (test: es.Expression, consequent: es.BlockStatement, alternate: es.Statement, loc?: es.SourceLocation | null) => es.IfStatement;
export declare const whileStatement: (body: es.BlockStatement, test: es.Expression, loc?: es.SourceLocation | null) => es.WhileStatement;
