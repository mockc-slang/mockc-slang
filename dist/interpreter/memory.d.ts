export declare class Memory {
    static WordSize: number;
    static Mega: number;
    view: DataView;
    stackLimit: number;
    private _stackFree;
    protected set stackFree(newValue: number);
    protected get stackFree(): number;
    heapLimit: number;
    heapStartingPoint: number;
    private _heapFree;
    protected set heapFree(newValue: number);
    protected get heapFree(): number;
    static NaNTag: number[];
    static NullTag: number[];
    static UnassignedTag: number[];
    static UndefinedTag: number[];
    static BlockframeTag: number[];
    static CallframeTag: number[];
    static ClosureTag: number[];
    static FrameTag: number[];
    static EnvironmentTag: number[];
    static PairTag: number[];
    static BuiltinTag: number[];
    static AddressTag: number[];
    static RawAddressTag: number[];
    static NaNTagOffset: number;
    constructor(megaBytes: number);
    static testNanBoxing(): boolean;
    static wordToString(word: number): string;
    displayMemoryLayout(): string;
    displayMemoryWord(i: number): string;
    allocateHeapMemory(size: number): number;
    getWordAtIndex(index: number): number;
    setWordAtIndex(index: number, x: number): void;
    setTaggedNaNAtIndex(index: number, tag: number[]): void;
    static setBit(x: DataView, i: number): void;
    static unsetBit(x: DataView, i: number): void;
    makeTaggedNaN(tag: number[]): number;
    static getBit(v: DataView, i: number): number;
    checkTag(x: number, tag: number[]): boolean;
    isTagged(x: number): boolean;
    isNumber(x: number): boolean;
    Null: number;
    isNull(x: number): boolean;
    Unassigned: number;
    isUnassigned(x: number): boolean;
    Undefined: number;
    isUndefined(x: number): boolean;
    isAddress(x: number): boolean;
    makeAddress(index: number): number;
    isRawAddress(x: number): boolean;
    makeRawAddress(index: number): number;
    getIndexFromAddress(address: number): number;
    addressDeref(address: number): number;
    isBuiltin(x: number): boolean;
    makeBuiltin(id: number): number;
    getIdFromBuiltin(builtin: number): number;
    isClosure(x: number): boolean;
    wordToCValue(x: number): string;
    makeClosure(poolIndex: number): number;
    getClosurePoolIndex(closureNaN: number): number;
    static BlockframeEnvironmentOffset: number;
    static BlockframeSize: number;
    allocateBlockframe(env: number): number;
    getBlockframeEnvironment(address: number): number;
    isBlockframe(x: number): boolean;
    static CallframeEnvironmentOffset: number;
    static CallframePcOffset: number;
    static CallframeSize: number;
    allocateCallframe(env: number, pc: number): number;
    getCallframeEnvironment(address: number): number;
    getCallframePc(address: number): number;
    isCallframe(x: number): boolean;
    static FrameSizeOffset: number;
    static FrameValuesOffset: number;
    allocateFrame(size: number): number;
    getFrameSize(frameAddress: number): number;
    getFrameValue(frameAddress: number, valueIndex: number): number;
    setFrameValue(frameAddress: number, valueIndex: number, value: number): void;
    displayFrame(frameAddress: number): string;
    static EnvironmentSizeOffset: number;
    static EnvironmentFramesOffset: number;
    allocateEnvironment(size: number): number;
    createGlobalEnvironment(): number;
    getEnvironmentSize(envAddress: number): number;
    getEnvironmentValue(envAddress: number, position: number[]): number;
    setEnvironmentValue(envAddress: number, position: number[], value: number): void;
    getEnvironmentFrame(envAddress: number, frameIndex: number): number;
    setEnvironmentFrame(envAddress: number, frameIndex: number, frame: number): void;
    getEnvironmentAddress(envAddress: number, position: number[]): number;
    setValueAtAddress(address: number, value: number): void;
    environmentExtend(frameAddress: number, envAddress: number): number;
    deallocateEnvironment(oldEnv: number): void;
    displayEnvironment(envAddress: number): string;
}
